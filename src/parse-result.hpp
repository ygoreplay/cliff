#ifndef CLIFF_PARSE_RESULT_HPP
#define CLIFF_PARSE_RESULT_HPP

enum EventType {
    RETRY = MSG_RETRY,
    HINT = MSG_HINT,
    WAITING = MSG_WAITING,
    START = MSG_START,
    WIN = MSG_WIN,
    UPDATE_DATA = MSG_UPDATE_DATA,
    UPDATE_CARD = MSG_UPDATE_CARD,
    REQUEST_DECK = MSG_REQUEST_DECK,
    SELECT_BATTLECMD = MSG_SELECT_BATTLECMD,
    SELECT_IDLECMD = MSG_SELECT_IDLECMD,
    SELECT_EFFECTYN = MSG_SELECT_EFFECTYN,
    SELECT_YESNO = MSG_SELECT_YESNO,
    SELECT_OPTION = MSG_SELECT_OPTION,
    SELECT_CARD = MSG_SELECT_CARD,
    SELECT_CHAIN = MSG_SELECT_CHAIN,
    SELECT_PLACE = MSG_SELECT_PLACE,
    SELECT_POSITION = MSG_SELECT_POSITION,
    SELECT_TRIBUTE = MSG_SELECT_TRIBUTE,
    SELECT_COUNTER = MSG_SELECT_COUNTER,
    SELECT_SUM = MSG_SELECT_SUM,
    SELECT_DISFIELD = MSG_SELECT_DISFIELD,
    SORT_CARD = MSG_SORT_CARD,
    SELECT_UNSELECT_CARD = MSG_SELECT_UNSELECT_CARD,
    CONFIRM_DECKTOP = MSG_CONFIRM_DECKTOP,
    CONFIRM_CARDS = MSG_CONFIRM_CARDS,
    SHUFFLE_DECK = MSG_SHUFFLE_DECK,
    SHUFFLE_HAND = MSG_SHUFFLE_HAND,
    REFRESH_DECK = MSG_REFRESH_DECK,
    SWAP_GRAVE_DECK = MSG_SWAP_GRAVE_DECK,
    SHUFFLE_SET_CARD = MSG_SHUFFLE_SET_CARD,
    REVERSE_DECK = MSG_REVERSE_DECK,
    DECK_TOP = MSG_DECK_TOP,
    SHUFFLE_EXTRA = MSG_SHUFFLE_EXTRA,
    NEW_TURN = MSG_NEW_TURN,
    NEW_PHASE = MSG_NEW_PHASE,
    CONFIRM_EXTRATOP = MSG_CONFIRM_EXTRATOP,
    MOVE = MSG_MOVE,
    POS_CHANGE = MSG_POS_CHANGE,
    SET = MSG_SET,
    SWAP = MSG_SWAP,
    FIELD_DISABLED = MSG_FIELD_DISABLED,
    SUMMONING = MSG_SUMMONING,
    SUMMONED = MSG_SUMMONED,
    SPSUMMONING = MSG_SPSUMMONING,
    SPSUMMONED = MSG_SPSUMMONED,
    FLIPSUMMONING = MSG_FLIPSUMMONING,
    FLIPSUMMONED = MSG_FLIPSUMMONED,
    CHAINING = MSG_CHAINING,
    CHAINED = MSG_CHAINED,
    CHAIN_SOLVING = MSG_CHAIN_SOLVING,
    CHAIN_SOLVED = MSG_CHAIN_SOLVED,
    CHAIN_END = MSG_CHAIN_END,
    CHAIN_NEGATED = MSG_CHAIN_NEGATED,
    CHAIN_DISABLED = MSG_CHAIN_DISABLED,
    CARD_SELECTED = MSG_CARD_SELECTED,
    RANDOM_SELECTED = MSG_RANDOM_SELECTED,
    BECOME_TARGET = MSG_BECOME_TARGET,
    DRAW = MSG_DRAW,
    DAMAGE = MSG_DAMAGE,
    RECOVER = MSG_RECOVER,
    EQUIP = MSG_EQUIP,
    LPUPDATE = MSG_LPUPDATE,
    UNEQUIP = MSG_UNEQUIP,
    CARD_TARGET = MSG_CARD_TARGET,
    CANCEL_TARGET = MSG_CANCEL_TARGET,
    PAY_LPCOST = MSG_PAY_LPCOST,
    ADD_COUNTER = MSG_ADD_COUNTER,
    REMOVE_COUNTER = MSG_REMOVE_COUNTER,
    ATTACK = MSG_ATTACK,
    BATTLE = MSG_BATTLE,
    ATTACK_DISABLED = MSG_ATTACK_DISABLED,
    DAMAGE_STEP_START = MSG_DAMAGE_STEP_START,
    DAMAGE_STEP_END = MSG_DAMAGE_STEP_END,
    MISSED_EFFECT = MSG_MISSED_EFFECT,
    BE_CHAIN_TARGET = MSG_BE_CHAIN_TARGET,
    CREATE_RELATION = MSG_CREATE_RELATION,
    RELEASE_RELATION = MSG_RELEASE_RELATION,
    TOSS_COIN = MSG_TOSS_COIN,
    TOSS_DICE = MSG_TOSS_DICE,
    ROCK_PAPER_SCISSORS = MSG_ROCK_PAPER_SCISSORS,
    HAND_RES = MSG_HAND_RES,
    ANNOUNCE_RACE = MSG_ANNOUNCE_RACE,
    ANNOUNCE_ATTRIB = MSG_ANNOUNCE_ATTRIB,
    ANNOUNCE_CARD = MSG_ANNOUNCE_CARD,
    ANNOUNCE_NUMBER = MSG_ANNOUNCE_NUMBER,
    CARD_HINT = MSG_CARD_HINT,
    TAG_SWAP = MSG_TAG_SWAP,
    RELOAD_FIELD = MSG_RELOAD_FIELD,
    AI_NAME = MSG_AI_NAME,
    SHOW_HINT = MSG_SHOW_HINT,
    PLAYER_HINT = MSG_PLAYER_HINT,
    MATCH_KILL = MSG_MATCH_KILL,
    CUSTOM_MSG = MSG_CUSTOM_MSG,
};

struct Event {
    EventType type;
    uint8_t player;
    CardData* relatedCard;
    nlohmann::json data;
};

class ParseResult {
public:
    ParseResult();
    ~ParseResult();

public:
    void addEvent(EventType type, uint8_t player, uint32_t relatedCardId);
    void addEvent(EventType type, uint8_t player, uint32_t relatedCardId, nlohmann::json data);

public:
    nlohmann::json toJSON();

private:
    void generateJSON();

private:
    nlohmann::json json;
    std::vector<Event*> events;
};

#endif // CLIFF_PARSE_RESULT_HPP
